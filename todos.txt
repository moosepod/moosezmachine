2/19/2017
- Got basic setup working 
- Experimenting with better instant feedback.
- Changed polling time to 2x a second. I think event driven will actually work much better, but i want to sort out the details using this process first. Event model w/ Django more complicated.
- Added status line formatted as code. Experimented with all output as "code" but didn't like the way it looked. Also we want this to work well on phones.
- Print status line on initialize


---

SCOPE: single-process slack terp

- Input stream that pulls from Slack (DONE)
- Can i change bot name for status? (not easily)
- Save/restore (use slack id as part of filename) (DONE)
- Temporary save after each move. Recover on startup (DONE, partial)
- _only_ quicksave when waiting for line. Do not quicksave in any mode other than waiting for line. Skip save, load
- Output status bar after reload?
- Send back "Processing..." after every command received?

- Handle explicit save/restore
- Handle quit
- Handle restart
- Experiment with status

- Switch to db
- Handle exeption reporting and logging
- Handle recovery
- Get channel from im.list command (just lookup userid)

---
SCOPE: django app

- Django 1.10 set up with channels
- Takes inbound event stream
- If user is currently in a game, load up terp, load game, process, post back, save.
  - Needs to be one channel per user
- If user not currently in game, run non-game UI (game selection, etc)
- Use memcache or something similar for quicksave/load

--- 

- Basic concept: django app using channels
  - Management command w/ lockfile listens
    - Looks for new dms
    - Routes all requests over to a message channel
  - Django channel workers receive the messages and act. This includes an "initialize" message.

- Before, time quickload/quicksave. 
- Use mongo or just postgres?

- use discord?

---
